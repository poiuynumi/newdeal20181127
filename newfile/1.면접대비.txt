java와 c의 차이점

=========================================================================================================================

구구단 코딩 가능?

=========================================================================================================================

객체지향 언어의 특징
1. 추상화(abstraction) 

추상화(abstraction)라는 것은 미술의 '추상화'라는 것과 비슷한 개념이라고 보시면 됩니다. 
미술에서 추상화라는 것은 그 핵심요지만 살리고 나머지는 생략하거나 변형하는 방법으로 그린 그림을 뜻하는 것이라는 점은 알고 계시겠죠.
마찬가지로 클래스를 구현함에 있어 모든 속성과 기능을 구현할 필요는 없습니다. 
'회사원 관리'를 위한 '사람' 클래스에서는 '성별'이라는 속성이 반드시 필요하지만 '남자목욕탕 회원 관리'를 위한 '사람' 클래스에서는 
굳이 성별이라는 속성을 표시할 필요가 없습니다. 어차피 모든 구성원이 '남자'일테니깐요.
이처럼 굳이 구현할 필요없는 부분을 과감히 생략하여 필요한 부분만을 나타내는 것을 추상화라고 합니다.
 

2. 캡슐화(encapsulation)와 데이터 은닉(hidden)
캡슐화(encapsulation)라는 것은 은닉화(hidden)라는 것과 비슷하지만 조금 차이가 있습니다. 
캡슐이라는 것은 약국에서 파는 알약 중에 '캡슐'에 들어가 있는 약을 생각하시면 됩니다. 
우리는 이 약을 복용할 때 그냥 캡슐채로 삼킬 뿐 그 안에 들어가 있는 알갱이 숫자를 세거나 구분해서 복용하지 않습니다. 
그냥 캡슐의 껍데기만 보고 무슨 약이라는 것을 알고 사용할 뿐입니다.
 

마찬가지로 어떤 클래스를 사용함에 있어 그 클래스가 제공하는 메소드의 기능만을 알고 그 기능만을 사용할 뿐
실제로 그 메소드가 어떻게 움직이는지는 굳이 알 필요가 없습니다. 
System.out.println()이라는 메소드를 쓰면 괄호 안의 내용이 출력된다는 사실만을 알면 되지 
그것이 어떤 원리로 나오는지는 굳이 알 필요가 없는 것과 마찬가지지요. 

은닉화라는 것은 이 캡슐화때문에 나오는 것인데 클래스의 속성들을 private으로 만들어 
클래스 밖에서 함부로 건드리지 못하게 하는 것을 말합니다. 
클래스를 사용함에 있어 속성들에 직접 접근하는 것은 데이터 무결성 오류등에 치명적일 수 있기 때문에 이들을 접근하지 못하게 하고
대신 '게터(getter)'와 '세터(setter)'라고 불리는 메소드를 통해서만 접근가능케 하는 것을 말합니다. 

이렇게 하면 초기에는 번거로워 보이지만 들어와서는 안될 데이터가 들어오는 것을 막을 수 있을 뿐 아니라
'객체 지향'이라는 의미에 보다 가깝게 접근하게 할 수 있습니다.

3. 상속(inheritance) 
상속이라는 것은 말그대로 부모의 유산을 자식이 이어받듯이 부모클래스의 속성과 메소드를 자식클래스가 이어받는 것을 말합니다. 
자식클래스는 extends라는 키워드를 통해 상속받은 부모클래스의 모든 멤버변수와 메소드를 승계하여 자신의 것처럼 쓸 수 있습니다. 
단, 이 때 부모클래스에서 private으로 선언했다면 가지고는 있지만 사용은 불가능합니다. 

자바는 단일상속만을 지원하기 때문에 한 클래스가 여러클래스로부터 상속을 받는 것은 불가능하며 
이러한 다중상속의 장점을 구현하기 위해 '인터페이스(interface)'를 사용합니다. 

객체지향의 특징인 1. 추상화, 2. 캡슐화 및 은닉화, 3. 상속의 의미를 알아야 합니다. 

1.추상화
  클래스를 구현함에 있어 필요한 부분만 구현할 수 있다. 

2. 캡슐화 및 은닉화
  캡슐화 - 어떤 클래스를 이용함에 있어 내용(내부적인 데이터 흐름)은 알 필요 없이 사용해도 된다. 
  은닉화 - 클래스의 내용을 함부러 고치지 못하도록 하여 무결성을 보장한다.
 
3. 상속
   어떤 클래스(부모 클래스)의 속성과 메소드를 다른 클래스(자식 클래스)가 이어 받아 사용할 수 있는 것.

=========================================================================================================================

String 과 StringBuilder 와 StringBuffer의 차이점

public class TimeTest {
	public static void main(String[] args){
		String str1 = "abc";
		String str2 = "def";
		long t1 = System.currentTimeMillis();
		for(int i=0;i<10000;i++){
			str1 += str2;
		}
		System.out.println(str1);
		System.out.println("time == " + (System.currentTimeMillis()-t1));
		
//		StringBuffer str1 = new StringBuffer("abc");
//		long t1 = System.currentTimeMillis();
//		for(int i=0;i<10000;i++){
//			str1.append("def");
//		}
//		System.out.println(str1.toString());
//		System.out.println("time == " + (System.currentTimeMillis()-t1));
	}
}

=========================================================================================================================

overloading과 overriding의 차이점
overloading : 같은 이름의 메소드를 여러개 정의 하는것
	      단, 매개변수의 타입이 다르거나 갯수가 달라야 한다.
	      return type과 접근 제어자는 영향을 주지 않는다.

overriding : 상속에서 나온개념
	   상위 클래스의 메소드를 하위 클래스에서 재정의.

=========================================================================================================================

컬렉션들의 특징(Hashtable과 Hashmap의 차이와 쓰임새 등등)

List 계열 : AbstractList, ArrayList, LinkedList, Vector 
Map 계열 : AbstractMap, Attributes, HashMap, Hashtable, IdentityHashMap, RenderingHints, TreeMap, WeakHashMap 
Set계열 : AbstractSet, HashSet, LinkedHashSet, TreeSet  

위의 List, Map,Set은 모두 Collection이라는 넘의 자식이라고 생각하시면됩니다.

Collection, List, Map,Set은 모두 구현되지 않은 interface입니다.
List a = new Vector();  --> 다형성(부모는 여러가지 자식의 형태로 나타날 수 잇다.)의 예가됩니다.

---- Collection 하위 interface

List :  수집의 순서가 있으며, 동일한 데이터의 중복 입력이 가능하며 ,순차적으로 대량의 데이터를 억세스하거나 입력할때 사용.

Set : 중복데이터를 불허.
        입력시 순서무시 ... 순차적인 접근을 위해 Iterator사용

---- Map 단독
Map : Key & Value의 형태로 입력
         수집의 순서가 없으며, 동일한 데이터를 Key값으로 사용할 수 없다. (단, key값이 다르고 value값이 동일한건 가능.)
         많은 양의 데이터에서 원하는 특정 데이터에 접근(검색)할 때 사용. 


Map 계열
HashMap은 데이터 입출력이 동기화되지 않고 처리속도가 빠른 반면  
HashTable은 모든 입출력이 동기화(토근을 부여받아 순차적으로 객체에 접근)되며 처리속도는 다소 떨어짐.

 
List계열
Vector가 synchronized(동기화)
ArrayList는 동기화x

=========================================================================================================================

1. 스레드(Thread) 정의
  : 프로세스내에서 동시에 실행되는 독립적인 실행 단위를 말함, 장점으로는 자원을 많이 사용하지 않고 구현이 쉬우며 범용성이 높다

2. 스레드(Thread) 특징
  · 어플리케이션의 성능을 향상시킬수 있고, 구현이 쉽다. 즉 작은투자로 큰효과를 기대.
  · 스레드를 활용한 대표적인 예) 웹 브라우저
  · 스레드를 쓰지 않고 프로세스나 다른 방법을 통하여 비슷하게 구현할수 있다. 
     반면 대부분의 자원을 많이 소모하여 구현이 복잡해지고 범용성이 떨어지는 등의 문제점이 있다. 
     스레드를 사용함으로 이 문제들을 해결할수 있다. 

3. 스레드(Thread)의 장점 /  단점
 : 스레드는 각자의 스택 메모리영역을 가지고 있다. 프로세스와 달리 스레드는 동일한 프로세스내의 다른 스레드들과 전역메모리를 공유한다. 이에 반해 프로세스는 자기 자신의 메모리 영역을 가진다.
   ①빠른 프로세스 생성  ② 적은 메모리 사용 ③ 쉬운 정보 공유
 ; 스레드는 작업 디렉토리, 파일 지시자들, 대부분의 전역변수와 데이터, UID와 GID 같은 자원들을 서로간에 공유하고 있기 때문에 자원을 쓰기시 복사(copy-on-write)방식으로 자식 프로세스에게 복사하여 사용하는 프로세스(fork) 방식에 비해 더 빠른 수행능력을 보여주고 있다. 하지만 다중스레드 방식의 프로그래밍에서는 매우 정교한 실패나 의도하지 않은 변수의 공유로 인해 야기되는 실패가 발생할 가능성이 매우 높다. 그 대표적인 예)교착상태

※ 교착상태 : 다중프로그래밍 체제에서 하나 또는 그 이상의 프로세스가 수행할수 없는 어떤 특정시간을 기다리고 있는 상태. 망에서는 사용 가능한 버퍼가 없어 일단의 노드들이 패킷을 전송할 수 없는 상태이다. 데이터 통신망에서 송신기 및 수신기간에 전송할 정보는 있지만 송수신에 필요한 자원이 서러 맞물려 있어 송수신이 이루어질수 없는 현상. 교착상태에는 직접, 간접 및 재조립 교착상태가 있다. 

4.스레드(Thread) 사용시 주의할 점
 : 확실한 사용 목적이 없는 경우 스레드사용을 자제하는 것이 좋다. 
   한 개의 스레드를 추가하게 되면 공유자원에 대해 동기화를 생각하고, 
   이로 인해 프로그램의 설계, 구현, 디버깅에 이르기까지 모든 것을 다시 생각해야 한다. 
   즉 무조건적으로 스레드를 사용하는것보다는 명확히 독립적인 경우에 한해 스레드를 사용하는 것이 좋다. 
   실제 스레드에 의해 수행되는 작업량보다 동기화로 인한 오버해드가 더 클 경우에는 사용을 자제하는 것이 좋다. 
   명확히 독립된 스레드라 하여도 운영체제가 스레드를 다루는 데에 따른 부하가 발생할수 있다.

5.스레드(Thread) 사용여부
 : 스레드가 모든 프로그래밍 문제에 있어서 가장 좋은 해답이라 할수없으며 스레드가 항상 좋은 결과만을 나타내지는 않는다. 
   한 예로 지나친 다중화는 스레드 자체의 연산보다는 각 스레드를 스케줄링하는데 대부분의 CPU타임을 소모하여 
   스레싱(thrashing)과 같은 문제를 야기할수 있다. 
   또한 어떤 문제들은 정말로 병행적이지 않아서 스레드를 사용할 경우 프로그램이 더 느려지고 복잡해질수 있으며, 
   프로그램의 모든 단계가 전 단계의 결과를 필요로 한다면 스레드를 사용하는 것은 그다지 도움이 되지 못한다. 
   왜냐하면 각 스레드는 다른 스레드가 끝날 때까지 대기상태에 있기 때문이다. 위와같은 경우엔 가급적 스레드 사용을 재고할 필요가 있다.

 ※좋은 결과를 얻을수 있는 예
     ① 여러 스레드의 의해서 병렬적으로 다수의 작업을 수행할수 있고, 다중프로세서 하드웨어 등에서 동작하는 프로그램
     ② 작업 처리량을 증가시키기 위해 중복될수 있는 많은 입출력을 수행하는 프로그램

=========================================================================================================================

JDBC?
JDBC(Java Data Base Connection)의 약자로 Java Language에서 데이터 베이스에 접근할 수 있는 프로그래밍을 의미한다


=========================================================================================================================

JDBC 코딩 단계?

DriverLoading >> Connection >> SQL 작성 >> Statement >> ResultSet >> Data get >> close

=========================================================================================================================

JDBC에서의 Transaction 관리?

conn.setAutoCommit(false);
정상 실행 : conn.commit();
exception 발생 : conn.rollback();

=========================================================================================================================

statement와 preparestement의 차이점

동적으로 쿼리문이 생성된다면 Statement를 사용
쿼리문이 변하지 않는다면 PreparedStatement를 사용


=========================================================================================================================

ConnectionPool이란?

=========================================================================================================================

servlet과 JSP의 차이점

Servlet - container가 이해 할 수 있게 구성된 순수 자바코드로만 이루어진 것.(html in java)
JSP - HTML기반에 자바코드를 블록화하여 삽입한 것.(java in html)

=========================================================================================================================

서블릿의 생성주기에 대해 설명하시오

=========================================================================================================================

모델1,2MVC패턴에 대해 설명하시오

MVC
객체지향프로그래밍에서, MVC란 사용자 인터페이스를 성공적이며 효과적으로 데이터 모형에 관련 시키기 위한 방법론 
또는 설계 방식중 하나이다. MVC 방식은 자바, Smalltalk, C 및 C++ 등과 같은 프로그래밍 언어를 쓰는 개발 환경에서 널리 사용된다. 
MVC 형식은 목적 코드의 재사용에 유용한 것은 물론, 사용자 인터페이스와 응용프로그램 개발에 소요되는 시간을 
현저하게 줄여주는 형식이라고 많은 개발자들이 평가하고 있다. 

MVC 형식은 소프트웨어 개발에 사용될 세 가지 구성요소 또는 객체를 제안한다. 

model : 소프트웨어 응용과 그와 관련된 고급 클래스 내의 논리적 데이터 기반 구조를 표현. 
            이 목적 모형은 사용자 인터페이스에 관한 어떠한 정보도 가지고 있지 않다. 
view : 사용자 인터페이스 내의 구성요소들을 표현하는 클래스들의 집합
         (누름단추, 표시 상자 등과 같이 사용자가 화면상에서 보고 응답할 수 있는 모든 것들) 
controller : 모형과 뷰를 연결하고 있는 클래스들을 대표하며, 모형과 뷰 내의 클래스들 간에 통신하는데 사용됨 

=========================================================================================================================

session과 cookie의 차이점과 사용용도

=========================================================================================================================

get과 post의 차이점

=========================================================================================================================

게시판 책안보고 짤수 있는가

=========================================================================================================================

Framework ?

=========================================================================================================================

ibatis에서의 transaction

<transactionManager type="JDBC" commitRequired="false">
  <dataSource type="JNDI">
   <property name="DataSource" value="BOAZ" />
  </dataSource>
</transactionManager>


try {

    sqlMapper.startTransaction();

 

   sqlMapper.commitTransaction();

}

catch {

}

finally {

    sqlMapper.endTransaction();

}


=========================================================================================================================

Struts2에서 action class 구성 3가지

1. POJO
2. Action Interface implements
3. ActionSupport extends

=========================================================================================================================

위의 3가지에 대한 차이점

=========================================================================================================================


